#%Module -*- tcl -*-
# The MIT License (MIT)
# Copyright (c) 2023 Tufts University
# Copyright (c) 2020 NVIDIA Corporation
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

module-whatis "Description: The Chroma package provides a toolbox and executables to carry out calculation of lattice Quantum Chromodynamics (LQCD). It is built on top of the QDP++ (QCD Data Parallel Layer) which provides an abstract data parallel view of the lattice and provides lattice wide types and expressions, using expression templates, to allow straightforward encoding of LQCD equations."
module-whatis "NGC: https://ngc.nvidia.com/catalog/containers/hpc:chroma"
module-whatis "Commands: chroma,hmc,mpirun"

set pkg chroma 
set ver 2021.04

proc ModulesHelp { } {
  puts stderr "\tThis module adds chroma v2021.04 to the environment.  It runs as a container under singularity"
}

#
# prepend-path and set SINGULARITY_BIND
#
prepend-path PATH            /cluster/tufts/ngc/tools/chroma/2021.04/bin
prepend-path --delim=, SINGULARITY_BIND /cluster/tufts

#
# set environment variable
#

setenv "SINGULARITYENV_LD_LIBRARY_PATH"  ""

#
# list conflict modules that cannot be loaded together
#
set conflicts_modules {chroma}
foreach a_conflict $conflicts_modules {
  conflict $a_conflict
}

#
# appended log section
# 

if {[module-info mode "load"]} {
  global env
  if {[info exists env(USER)]} {
    set the_user [lindex [array get env USER] 1]
  } else {
    set the_user "foo"
  }
  system [concat "logger environment-modules" [module-info name] $the_user ]
}

set additional_prereqs {"singularity/3.8.4" "squashfs/4.4"}
if {[module-info mode "load"]} {
  foreach a_module $additional_prereqs {
    if {![is-loaded $a_module]} {
      module load $a_module
    }
  }
}
